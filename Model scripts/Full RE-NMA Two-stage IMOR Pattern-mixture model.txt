######################################################################################  
#                                                                                    #
#      Full RE NMA model with consistency and accomodation of multi-arm trials       #
#              (Dias et al., 2012 – PMID: 23104435; Appendix Example 7(a))           #
#     Two-stage pattern-mixture IMOR model with Missing at Random (MAR) assumption   #
#                                                                                    #
######################################################################################  


model{ 
   for(i in 1:ns2){                                                                     # LOOP THROUGH 2-ARM STUDIES
     y[i, 2] ~ dnorm(delta[i, 2], prec[i, 2])                                           # normal likelihood for 2-arm trials
     dev[i, 2] <- (y[i, 2] - delta[i, 2])*(y[i, 2] - delta[i, 2])*prec[i, 2]            # Deviance contribution for trial i
                  }

   for(i in (ns2 + 1):(ns2 + ns3)){ # LOOP THROUGH 3-ARM STUDIES
     for(k in 1:(na[i] - 1)){ 
       for(j in 1:(na[i] - 1)){ 
         Sigma[i, j, k] <- V[i]*(1 - equals(j, k)) + vari[i, (k + 1)]*equals(j, k)      # set variance-covariance matrix
                               }
                              }

     Omega[i, 1:(na[i] - 1), 1:(na[i] - 1)] <- inverse(Sigma[i, , ])                    # Precision matrix  
     y[i, 2:na[i]] ~ dmnorm(delta[i, 2:na[i]], Omega[i, 1:(na[i] - 1), 1:(na[i] - 1)])  # multivariate normal likelihood for 3-arm trials 

     for(k in 1:(na[i] - 1)){
       ydiff[i, (k + 1)] <- y[i, (k + 1)] - delta[i, (k + 1)]                           # multiply vector & matrix
       z[i, (k + 1)] <- inprod(Omega[i, k, 1:(na[i] - 1)], ydiff[i, 2:na[i]])
       dev[i, (k + 1)] <- ydiff[i, (k + 1)]*z[i, (k + 1)]                               # Deviance contribution for trial i
                            }   
                                  }

   for(i in (ns2 + ns3 + 1):(ns2 + ns3 + ns4)){                                        # LOOP THROUGH 4-ARM STUDIES
     for(k in 1:(na[i] - 1)){    
       for(j in 1:(na[i] - 1)){ 
         Sigma2[i, j, k] <- V[i]*(1 - equals(j, k)) + vari[i, (k + 1)]*equals(j, k)    # set variance-covariance matrix
                            } 
                           }

     Omega2[i, 1:(na[i] - 1), 1:(na[i] - 1)] <- inverse(Sigma2[i, , ])                  # Precision matrix 
     y[i, 2:na[i]] ~ dmnorm(delta[i, 2:na[i]], Omega2[i, 1:(na[i] - 1), 1:(na[i] - 1)]) # multivariate normal likelihood for 4-arm trials     

     for(k in 1:(na[i] - 1)){
       ydiff[i, (k + 1)] <- y[i, (k + 1)] - delta[i, (k + 1)]                           # multiply vector & matrix
       z[i, (k + 1)] <- inprod(Omega2[i, k, 1:(na[i] - 1)], ydiff[i, 2:na[i]])
       dev[i, (k + 1)] <- ydiff[i, (k + 1)]*z[i, (k + 1)]                               # Deviance contribution for trial i
                            }              
                                                }

   for(i in 1:(ns2 + ns3 + ns4)){                                                       # LOOP THROUGH ALL STUDIES
     w[i, 1] <- 0                                                                       # adjustment for multi-arm trials is zero for control arm
     #delta[i, 1] <- 0                                                                   # treatment effect is zero for control arm

     resdev[i] <- sum(dev[i, 2:na[i]])                                                  # summed residual deviance contribution for this trial

     for(k in 2:na[i]){                                                                 # LOOP THROUGH ARMS
       vari[i, k] <- pow(se[i, k], 2)                                                   # calculate variances
       prec[i, k] <- 1/vari[i, k]                                                       # set precisions

       delta[i, k] ~ dnorm(md[i, k], taud[i, k])                                        # trial-specific treat effects distributions
       md[i, k] <- d[t[i, k]] - d[t[i, 1]] + sw[i, k]                                   # mean of treat effects distributions (with multi-arm trial correction)
       taud[i, k] <- tau*2*(k - 1)/k                                                    # precision of treat effects distributions (with multi-arm trial correction)
       w[i, k] <- (delta[i, k] - d[t[i, k]] + d[t[i, 1]])                               # adjustment for multi-arm RCTs
       sw[i, k] <- sum(w[i, 1:(k - 1)])/(k - 1)                                         # cumulative adjustment for multi-arm trials
                       }
                         }

   totresdev <- sum(resdev[])                                                           #Total Residual Deviance
   
   d[ref] <- 0                                                                          # treatment effect is zero for reference treatment
   for(k in 1:(ref - 1)){                                                               # vague priors for treatment effects
     d[k] ~ dnorm(0, .0001) 
                         } 

   for(k in (ref + 1):nt){ 
     d[k] ~ dnorm(0, .0001) 
                          }

   
   ## Prior specifications
   tau <- pow(tausq, -1)
   tausq ~ dlnorm(mean.tau2, prec.tau2)                                                


   
   #### Collection of results ####
   # compared to baseline
   for(t in 1:(ref - 1)){
     LOR.ref[t] <- d[t] - d[ref]
                        }

   for(t in (ref + 1):nt){
     LOR.ref[t] <- d[t] - d[ref]
                         }
 
   ## Ranking probabilities
   sorted <- rank(d[])
   for(k in 1:nt){   
     order[k] <- nt + 1 - sorted[k]                                                   # For positive outcome - omit 'nt+1-' for negative outcome
     most.effective[k] <- equals(order[k], 1)
		
     for(j in 1:nt){
       effectiveness[k, j] <- equals(order[k], j)
		    }
	           }
		
   for(k in 1:nt){
     for(j in 1:nt){
       cumeffectiveness[k, j] <- sum(effectiveness[k, 1:j])
		   }
	          }
	
   # SUCRAS #
   for(k in 1:nt){
     SUCRA[k]<- sum(cumeffectiveness[k, 1:(nt-1)])/(nt-1)
	         }	
    }